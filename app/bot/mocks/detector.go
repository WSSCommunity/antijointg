// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/umputun/tg-spam/lib"
	"io"
	"sync"
)

// DetectorMock is a mock implementation of bot.Detector.
//
//	func TestSomethingThatUsesDetector(t *testing.T) {
//
//		// make and configure a mocked bot.Detector
//		mockedDetector := &DetectorMock{
//			CheckFunc: func(msg string, userID int64) (bool, []lib.CheckResult) {
//				panic("mock out the Check method")
//			},
//			LoadSamplesFunc: func(exclReader io.Reader, spamReaders []io.Reader, hamReaders []io.Reader) (lib.LoadResult, error) {
//				panic("mock out the LoadSamples method")
//			},
//			LoadStopWordsFunc: func(readers ...io.Reader) (lib.LoadResult, error) {
//				panic("mock out the LoadStopWords method")
//			},
//			ResetFunc: func()  {
//				panic("mock out the Reset method")
//			},
//			UpdateHamFunc: func(msg string) error {
//				panic("mock out the UpdateHam method")
//			},
//			UpdateSpamFunc: func(msg string) error {
//				panic("mock out the UpdateSpam method")
//			},
//			WithHamUpdaterFunc: func(s lib.SampleUpdater)  {
//				panic("mock out the WithHamUpdater method")
//			},
//			WithSpamUpdaterFunc: func(s lib.SampleUpdater)  {
//				panic("mock out the WithSpamUpdater method")
//			},
//		}
//
//		// use mockedDetector in code that requires bot.Detector
//		// and then make assertions.
//
//	}
type DetectorMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(msg string, userID int64) (bool, []lib.CheckResult)

	// LoadSamplesFunc mocks the LoadSamples method.
	LoadSamplesFunc func(exclReader io.Reader, spamReaders []io.Reader, hamReaders []io.Reader) (lib.LoadResult, error)

	// LoadStopWordsFunc mocks the LoadStopWords method.
	LoadStopWordsFunc func(readers ...io.Reader) (lib.LoadResult, error)

	// ResetFunc mocks the Reset method.
	ResetFunc func()

	// UpdateHamFunc mocks the UpdateHam method.
	UpdateHamFunc func(msg string) error

	// UpdateSpamFunc mocks the UpdateSpam method.
	UpdateSpamFunc func(msg string) error

	// WithHamUpdaterFunc mocks the WithHamUpdater method.
	WithHamUpdaterFunc func(s lib.SampleUpdater)

	// WithSpamUpdaterFunc mocks the WithSpamUpdater method.
	WithSpamUpdaterFunc func(s lib.SampleUpdater)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Msg is the msg argument value.
			Msg string
			// UserID is the userID argument value.
			UserID int64
		}
		// LoadSamples holds details about calls to the LoadSamples method.
		LoadSamples []struct {
			// ExclReader is the exclReader argument value.
			ExclReader io.Reader
			// SpamReaders is the spamReaders argument value.
			SpamReaders []io.Reader
			// HamReaders is the hamReaders argument value.
			HamReaders []io.Reader
		}
		// LoadStopWords holds details about calls to the LoadStopWords method.
		LoadStopWords []struct {
			// Readers is the readers argument value.
			Readers []io.Reader
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
		}
		// UpdateHam holds details about calls to the UpdateHam method.
		UpdateHam []struct {
			// Msg is the msg argument value.
			Msg string
		}
		// UpdateSpam holds details about calls to the UpdateSpam method.
		UpdateSpam []struct {
			// Msg is the msg argument value.
			Msg string
		}
		// WithHamUpdater holds details about calls to the WithHamUpdater method.
		WithHamUpdater []struct {
			// S is the s argument value.
			S lib.SampleUpdater
		}
		// WithSpamUpdater holds details about calls to the WithSpamUpdater method.
		WithSpamUpdater []struct {
			// S is the s argument value.
			S lib.SampleUpdater
		}
	}
	lockCheck           sync.RWMutex
	lockLoadSamples     sync.RWMutex
	lockLoadStopWords   sync.RWMutex
	lockReset           sync.RWMutex
	lockUpdateHam       sync.RWMutex
	lockUpdateSpam      sync.RWMutex
	lockWithHamUpdater  sync.RWMutex
	lockWithSpamUpdater sync.RWMutex
}

// Check calls CheckFunc.
func (mock *DetectorMock) Check(msg string, userID int64) (bool, []lib.CheckResult) {
	if mock.CheckFunc == nil {
		panic("DetectorMock.CheckFunc: method is nil but Detector.Check was just called")
	}
	callInfo := struct {
		Msg    string
		UserID int64
	}{
		Msg:    msg,
		UserID: userID,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(msg, userID)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedDetector.CheckCalls())
func (mock *DetectorMock) CheckCalls() []struct {
	Msg    string
	UserID int64
} {
	var calls []struct {
		Msg    string
		UserID int64
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

// LoadSamples calls LoadSamplesFunc.
func (mock *DetectorMock) LoadSamples(exclReader io.Reader, spamReaders []io.Reader, hamReaders []io.Reader) (lib.LoadResult, error) {
	if mock.LoadSamplesFunc == nil {
		panic("DetectorMock.LoadSamplesFunc: method is nil but Detector.LoadSamples was just called")
	}
	callInfo := struct {
		ExclReader  io.Reader
		SpamReaders []io.Reader
		HamReaders  []io.Reader
	}{
		ExclReader:  exclReader,
		SpamReaders: spamReaders,
		HamReaders:  hamReaders,
	}
	mock.lockLoadSamples.Lock()
	mock.calls.LoadSamples = append(mock.calls.LoadSamples, callInfo)
	mock.lockLoadSamples.Unlock()
	return mock.LoadSamplesFunc(exclReader, spamReaders, hamReaders)
}

// LoadSamplesCalls gets all the calls that were made to LoadSamples.
// Check the length with:
//
//	len(mockedDetector.LoadSamplesCalls())
func (mock *DetectorMock) LoadSamplesCalls() []struct {
	ExclReader  io.Reader
	SpamReaders []io.Reader
	HamReaders  []io.Reader
} {
	var calls []struct {
		ExclReader  io.Reader
		SpamReaders []io.Reader
		HamReaders  []io.Reader
	}
	mock.lockLoadSamples.RLock()
	calls = mock.calls.LoadSamples
	mock.lockLoadSamples.RUnlock()
	return calls
}

// LoadStopWords calls LoadStopWordsFunc.
func (mock *DetectorMock) LoadStopWords(readers ...io.Reader) (lib.LoadResult, error) {
	if mock.LoadStopWordsFunc == nil {
		panic("DetectorMock.LoadStopWordsFunc: method is nil but Detector.LoadStopWords was just called")
	}
	callInfo := struct {
		Readers []io.Reader
	}{
		Readers: readers,
	}
	mock.lockLoadStopWords.Lock()
	mock.calls.LoadStopWords = append(mock.calls.LoadStopWords, callInfo)
	mock.lockLoadStopWords.Unlock()
	return mock.LoadStopWordsFunc(readers...)
}

// LoadStopWordsCalls gets all the calls that were made to LoadStopWords.
// Check the length with:
//
//	len(mockedDetector.LoadStopWordsCalls())
func (mock *DetectorMock) LoadStopWordsCalls() []struct {
	Readers []io.Reader
} {
	var calls []struct {
		Readers []io.Reader
	}
	mock.lockLoadStopWords.RLock()
	calls = mock.calls.LoadStopWords
	mock.lockLoadStopWords.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *DetectorMock) Reset() {
	if mock.ResetFunc == nil {
		panic("DetectorMock.ResetFunc: method is nil but Detector.Reset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc()
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedDetector.ResetCalls())
func (mock *DetectorMock) ResetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// UpdateHam calls UpdateHamFunc.
func (mock *DetectorMock) UpdateHam(msg string) error {
	if mock.UpdateHamFunc == nil {
		panic("DetectorMock.UpdateHamFunc: method is nil but Detector.UpdateHam was just called")
	}
	callInfo := struct {
		Msg string
	}{
		Msg: msg,
	}
	mock.lockUpdateHam.Lock()
	mock.calls.UpdateHam = append(mock.calls.UpdateHam, callInfo)
	mock.lockUpdateHam.Unlock()
	return mock.UpdateHamFunc(msg)
}

// UpdateHamCalls gets all the calls that were made to UpdateHam.
// Check the length with:
//
//	len(mockedDetector.UpdateHamCalls())
func (mock *DetectorMock) UpdateHamCalls() []struct {
	Msg string
} {
	var calls []struct {
		Msg string
	}
	mock.lockUpdateHam.RLock()
	calls = mock.calls.UpdateHam
	mock.lockUpdateHam.RUnlock()
	return calls
}

// UpdateSpam calls UpdateSpamFunc.
func (mock *DetectorMock) UpdateSpam(msg string) error {
	if mock.UpdateSpamFunc == nil {
		panic("DetectorMock.UpdateSpamFunc: method is nil but Detector.UpdateSpam was just called")
	}
	callInfo := struct {
		Msg string
	}{
		Msg: msg,
	}
	mock.lockUpdateSpam.Lock()
	mock.calls.UpdateSpam = append(mock.calls.UpdateSpam, callInfo)
	mock.lockUpdateSpam.Unlock()
	return mock.UpdateSpamFunc(msg)
}

// UpdateSpamCalls gets all the calls that were made to UpdateSpam.
// Check the length with:
//
//	len(mockedDetector.UpdateSpamCalls())
func (mock *DetectorMock) UpdateSpamCalls() []struct {
	Msg string
} {
	var calls []struct {
		Msg string
	}
	mock.lockUpdateSpam.RLock()
	calls = mock.calls.UpdateSpam
	mock.lockUpdateSpam.RUnlock()
	return calls
}

// WithHamUpdater calls WithHamUpdaterFunc.
func (mock *DetectorMock) WithHamUpdater(s lib.SampleUpdater) {
	if mock.WithHamUpdaterFunc == nil {
		panic("DetectorMock.WithHamUpdaterFunc: method is nil but Detector.WithHamUpdater was just called")
	}
	callInfo := struct {
		S lib.SampleUpdater
	}{
		S: s,
	}
	mock.lockWithHamUpdater.Lock()
	mock.calls.WithHamUpdater = append(mock.calls.WithHamUpdater, callInfo)
	mock.lockWithHamUpdater.Unlock()
	mock.WithHamUpdaterFunc(s)
}

// WithHamUpdaterCalls gets all the calls that were made to WithHamUpdater.
// Check the length with:
//
//	len(mockedDetector.WithHamUpdaterCalls())
func (mock *DetectorMock) WithHamUpdaterCalls() []struct {
	S lib.SampleUpdater
} {
	var calls []struct {
		S lib.SampleUpdater
	}
	mock.lockWithHamUpdater.RLock()
	calls = mock.calls.WithHamUpdater
	mock.lockWithHamUpdater.RUnlock()
	return calls
}

// WithSpamUpdater calls WithSpamUpdaterFunc.
func (mock *DetectorMock) WithSpamUpdater(s lib.SampleUpdater) {
	if mock.WithSpamUpdaterFunc == nil {
		panic("DetectorMock.WithSpamUpdaterFunc: method is nil but Detector.WithSpamUpdater was just called")
	}
	callInfo := struct {
		S lib.SampleUpdater
	}{
		S: s,
	}
	mock.lockWithSpamUpdater.Lock()
	mock.calls.WithSpamUpdater = append(mock.calls.WithSpamUpdater, callInfo)
	mock.lockWithSpamUpdater.Unlock()
	mock.WithSpamUpdaterFunc(s)
}

// WithSpamUpdaterCalls gets all the calls that were made to WithSpamUpdater.
// Check the length with:
//
//	len(mockedDetector.WithSpamUpdaterCalls())
func (mock *DetectorMock) WithSpamUpdaterCalls() []struct {
	S lib.SampleUpdater
} {
	var calls []struct {
		S lib.SampleUpdater
	}
	mock.lockWithSpamUpdater.RLock()
	calls = mock.calls.WithSpamUpdater
	mock.lockWithSpamUpdater.RUnlock()
	return calls
}
