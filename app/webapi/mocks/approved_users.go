// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/umputun/tg-spam/app/storage"
	"sync"
)

// ApprovedUsersStoreMock is a mock implementation of webapi.ApprovedUsersStore.
//
//	func TestSomethingThatUsesApprovedUsersStore(t *testing.T) {
//
//		// make and configure a mocked webapi.ApprovedUsersStore
//		mockedApprovedUsersStore := &ApprovedUsersStoreMock{
//			DeleteFunc: func(id int64) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func() ([]storage.ApprovedUsersInfo, error) {
//				panic("mock out the GetAll method")
//			},
//			WriteFunc: func(user storage.ApprovedUsersInfo) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedApprovedUsersStore in code that requires webapi.ApprovedUsersStore
//		// and then make assertions.
//
//	}
type ApprovedUsersStoreMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id int64) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]storage.ApprovedUsersInfo, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(user storage.ApprovedUsersInfo) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID int64
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// User is the user argument value.
			User storage.ApprovedUsersInfo
		}
	}
	lockDelete sync.RWMutex
	lockGetAll sync.RWMutex
	lockWrite  sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *ApprovedUsersStoreMock) Delete(id int64) error {
	if mock.DeleteFunc == nil {
		panic("ApprovedUsersStoreMock.DeleteFunc: method is nil but ApprovedUsersStore.Delete was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedApprovedUsersStore.DeleteCalls())
func (mock *ApprovedUsersStoreMock) DeleteCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// ResetDeleteCalls reset all the calls that were made to Delete.
func (mock *ApprovedUsersStoreMock) ResetDeleteCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()
}

// GetAll calls GetAllFunc.
func (mock *ApprovedUsersStoreMock) GetAll() ([]storage.ApprovedUsersInfo, error) {
	if mock.GetAllFunc == nil {
		panic("ApprovedUsersStoreMock.GetAllFunc: method is nil but ApprovedUsersStore.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedApprovedUsersStore.GetAllCalls())
func (mock *ApprovedUsersStoreMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// ResetGetAllCalls reset all the calls that were made to GetAll.
func (mock *ApprovedUsersStoreMock) ResetGetAllCalls() {
	mock.lockGetAll.Lock()
	mock.calls.GetAll = nil
	mock.lockGetAll.Unlock()
}

// Write calls WriteFunc.
func (mock *ApprovedUsersStoreMock) Write(user storage.ApprovedUsersInfo) error {
	if mock.WriteFunc == nil {
		panic("ApprovedUsersStoreMock.WriteFunc: method is nil but ApprovedUsersStore.Write was just called")
	}
	callInfo := struct {
		User storage.ApprovedUsersInfo
	}{
		User: user,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(user)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedApprovedUsersStore.WriteCalls())
func (mock *ApprovedUsersStoreMock) WriteCalls() []struct {
	User storage.ApprovedUsersInfo
} {
	var calls []struct {
		User storage.ApprovedUsersInfo
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}

// ResetWriteCalls reset all the calls that were made to Write.
func (mock *ApprovedUsersStoreMock) ResetWriteCalls() {
	mock.lockWrite.Lock()
	mock.calls.Write = nil
	mock.lockWrite.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ApprovedUsersStoreMock) ResetCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()

	mock.lockGetAll.Lock()
	mock.calls.GetAll = nil
	mock.lockGetAll.Unlock()

	mock.lockWrite.Lock()
	mock.calls.Write = nil
	mock.lockWrite.Unlock()
}
